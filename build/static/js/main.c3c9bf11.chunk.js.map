{"version":3,"sources":["App.js","index.js"],"names":["App","useState","file","setFile","blobs","setBlobs","getBlobs","window","blobService","listBlobsSegmented","error","results","entries","useEffect","console","log","style","display","flexDirection","alignItems","type","onChange","e","f","Array","from","target","files","onClick","size","alert","customBlockSize","singleBlobPutThresholdInBytes","createBlockBlobFromBrowserFile","name","blockSize","result","response","map","image","i","key","alt","width","src","blobUri","blobName","deleteBlobIfExists","ReactDOM","render","document","getElementById"],"mappings":"4NAoHeA,MAlHf,WAAgB,IAAD,EACWC,mBAAS,MADpB,mBACNC,EADM,KACAC,EADA,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KASb,SAASC,IACHC,OAAOC,aACTD,OAAOC,YAAYC,mBAAmB,SAAU,MAAM,SACpDC,EACAC,GAEID,GAGFL,EAASM,EAAQC,YA+DzB,OAzDAC,qBAAU,WACRP,MACC,IAqDHQ,QAAQC,IAAIX,GAGV,yBACEY,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,eAGd,4CACA,2BAAOC,KAAK,OAAOC,SAtFvB,SAAsBC,GACpB,IAAMC,EAAIC,MAAMC,KAAKH,EAAEI,OAAOC,OAAO,GACrCxB,EAAQoB,MAqFN,6BACA,4BAAQH,KAAK,SAASQ,QAhE1B,WACE,GAAK1B,EAKL,GAAkB,cAAdA,EAAKkB,MAAsC,eAAdlB,EAAKkB,KAKtC,GAAIlB,EAAK2B,MAAQ,QACfC,MAAM,4CADR,CAKA,IAAMC,EACJ7B,EAAK2B,KAAO,SAAmB,QAAkB,OACnDtB,OAAOC,YAAYwB,8BAAgCD,EAEnDxB,OAAOC,YAAYyB,+BACjB,SACA/B,EAAKgC,KACLhC,EACA,CAAEiC,UAAWJ,IACb,SAASrB,EAAO0B,EAAQC,GAClB3B,GAGFJ,YAtBJwB,MAAM,8BALNA,MAAM,oBA8DN,UAGA,6BACC1B,EAAMkC,KAAI,SAACC,EAAOC,GAAR,OACT,yBAAKxB,MAAO,CAAEC,QAAS,OAAQE,WAAY,eACzC,yBACEsB,IAAKD,EACLE,IAAKF,EACLxB,MAAO,CAAE2B,MAAO,IAAK1B,QAAS,SAC9B2B,IAAG,UAAKrC,OAAOsC,QAAZ,mBAA8BN,EAAML,QAEzC,4BAAQd,KAAK,SAASQ,SAzCRkB,EAyC8BP,EAAML,KAxCjD,WACL3B,OAAOC,YAAYuC,mBAAmB,SAAUD,GAAU,SACxDpC,EACA0B,GAEI1B,GAGFJ,OAGJQ,QAAQC,IAAI+B,MA6BR,UAGA,8BA5CR,IAAsBA,OC7DxBE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c3c9bf11.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [blobs, setBlobs] = useState([]);\n\n  function onChangeFile(e) {\n    const f = Array.from(e.target.files)[0];\n    setFile(f);\n  }\n\n  function getBlobs() {\n    if (window.blobService) {\n      window.blobService.listBlobsSegmented('images', null, function(\n        error,\n        results\n      ) {\n        if (error) {\n          // List blobs error\n        } else {\n          setBlobs(results.entries);\n        }\n      });\n    }\n  }\n\n  useEffect(() => {\n    getBlobs();\n  }, []);\n\n  function handleUpload() {\n    if (!file) {\n      alert('File is empty!');\n      return;\n    }\n\n    if (file.type !== 'image/png' && file.type !== 'image/jpeg') {\n      alert('File is not an image!');\n      return;\n    }\n\n    if (file.size >= 1024 * 1024) {\n      alert('File size must not smaller than 1MB!');\n      return;\n    }\n\n    const customBlockSize =\n      file.size > 1024 * 1024 * 32 ? 1024 * 1024 * 4 : 1024 * 512;\n    window.blobService.singleBlobPutThresholdInBytes = customBlockSize;\n\n    window.blobService.createBlockBlobFromBrowserFile(\n      'images',\n      file.name,\n      file,\n      { blockSize: customBlockSize },\n      function(error, result, response) {\n        if (error) {\n          // Upload blob failed\n        } else {\n          getBlobs();\n        }\n      }\n    );\n  }\n\n  function handleDelete(blobName) {\n    return function() {\n      window.blobService.deleteBlobIfExists('images', blobName, function(\n        error,\n        result\n      ) {\n        if (error) {\n          // Delete blob failed\n        } else {\n          getBlobs();\n        }\n      });\n      console.log(blobName);\n    };\n  }\n\n  console.log(blobs);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n      }}\n    >\n      <h1>Upload Image</h1>\n      <input type=\"file\" onChange={onChangeFile} />\n      <br />\n      <button type=\"button\" onClick={handleUpload}>\n        Upload\n      </button>\n      <br />\n      {blobs.map((image, i) => (\n        <div style={{ display: 'flex', alignItems: 'flex-start' }}>\n          <img\n            key={i}\n            alt={i}\n            style={{ width: 300, display: 'block' }}\n            src={`${window.blobUri}/images/${image.name}`}\n          />\n          <button type=\"button\" onClick={handleDelete(image.name)}>\n            Delete\n          </button>\n          <br />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}